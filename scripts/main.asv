clear; close all; clc

set(0,'DefaultLineLineWidth', 1.5, ...
    'DefaultAxesFontName', 'Latin Modern Math', ...
    'DefaultAxesFontSize', 14);  

%% Parametros da suspensao da quanser e matrizes do sistema

fprintf('Definindo parametros e matrizes do sistema...\n')

% mv = 2.45;  % [mv] = kg --> Massa de 1/4 do veiculo
mv = 1.45;  % [mv] = kg --> Massa de 1/4 do veiculo
ks = 900;   % [ks] = N/m --> Constante elastica da suspensao
bs = 7.5;   % [bs] = Ns/m --> Coeficiente de amortecimento da suspensao
mr = 1;     % [mr] = kg --> Massa do eixo-roda
kp = 1250;  % [kp] = N/m --> Constante elastica do pneu
bp = 5;     % [bp] = Ns/m --> Coeficiente de amortecimento do pneu

% Sistema saudavel (A sem variaçao)
A = [0 1 0 -1; -ks/mv -bs/mv 0 bs/mv; 0 0 0 1; ks/mr bs/mr -kp/mr -(bs+bp)/mr];
B1 = [0; 0; -1; bp/mr];
B2 = [0; 1/mv; 0; -1/mr];
B = [B1 B2];
C = [1 0 0 0; -ks/mv -bs/mv 0 bs/mv];
D1 = [0; 0];
D2 = [0; 1/mv];
D = [D1 D2];

% Situaçoes de analise
%%% Caso 0: Planta saudavel
[A_c0, B1_c0, B2_c0, C_c0, D1_c0, D2_c0] = update_matrices(mv, ks, bs, mr, kp, bp);
%%% Caso 1: Perda do amortecimento da suspensao de 50%
bs_ = 0.5*bs;
[A_c1, B1_c1, B2_c1, C_c1, D1_c1, D2_c1] = update_matrices(mv, ks, bs_, mr, kp, bp);
%%% Caso 2: Perda da rigidez da mola da suspensao de 50%
ks_ = 0.5*ks;
[A_c2, B1_c2, B2_c2, C_c2, D1_c2, D2_c2] = update_matrices(mv, ks_, bs, mr, kp, bp);
%%% Caso 3: Perda de amortecimento da suspensao e da rigidez da mola de 50%
bs_ = 0; ks_ = 0;
[A_c3, B1_c3, B2_c3, C_c3, D1_c3, D2_c3] = update_matrices(mv, ks_, bs_, mr, kp, bp);

%% Projeto do observador

fprintf('Projetando ganhos dos observadores...\n')

p = eig(A);  % Polos da planta
C_obs1 = C(1, :);  % Matriz de saida do observador 1
C_obs2 = C(2, :);  % Matriz de saida do observador 2

%%% Luenberger
%%%% Polos desejados para o observador
p_luenberger = 4*p;
%%%% Observador 1
Ko1_luenberger = place(A', C_obs1', p_luenberger)';
%%%% Observador 2
Ko2_luenberger = place(A', C_obs2', p_luenberger)';

%%% UIO - Heloi
%%%% Polos desejados para o observador  - TODO: Problema! E*C = 0 --> Igual a Luenberger
p_uio = 4*p;
%%%% Observador 1
% [N_obs1, L_obs1, G_obs1, E_obs1, Ko1_uio] = project_uio(A, B1, B2, C_obs1, p_uio);  % APENAS w(t) como sinal desconhecido
% [N_obs1, L_obs1, G_obs1, E_obs1, Ko1_uio] = project_uio(A, B, 0, C_obs1, p_uio);  % AMBOS w(t) e u(t) como sinais desconhecidos
%%%% Observador 2
% [N_obs2, L_obs2, G_obs2, E_obs2, Ko2_uio] = project_uio(A, B1, B2, C_obs2, p_uio);  % APENAS w(t) como sinal desconhecido
% [N_obs2, L_obs2, G_obs2, E_obs2, Ko2_uio] = project_uio(A, B, 0, C_obs2, p_uio);  % AMBOS w(t) e u(t) como sinais desconhecidos

%%% Kalman
% TODO 

%% Sinal de Chirp

fprintf('Gerando sinal de chirp...\n')

%%% Chirp 
% Parametros para gerar o sinal
As = 0.2;
T0 = 16;
f0 = 1/T0;
k1 = 0*(1/f0);  % Fica mais claro do que k1 = 0*T0
k2 = 10*(1/f0);
dt = 2.5E-5;  % Para que a gente consiga visualizar bem
t = 0:dt:T0;
N = 2;  % Numero de periodos
% N = 1;  % Numero de periodos

% Sinal gerado
[w, t] = generate_chirp(As, T0, k1, k2, t, N);

% Exportando para arquivo
wt = timeseries(w, t);
save('../data/chirp_data.mat', 'wt', '-v7.3')

% Salvando as figuras
%%% No tempo
fig_chirp = plot_chirp(t, w, [t(1), t(end), -As*1.1, As*1.1], true, '../figs/chirp.png');
%%% Na frequencia
ii = ceil(length(t)/2);
w_ = w(1:ii);  % Fazendo assim pois dois concatenados da bug...
fig_mag = plot_fspec(w_, length(w_)*10, dt, [k1*f0, k2*f0+2, -20, 1], [k1*f0, k2*f0+2, -185, 185], true, true, '../figs/chirp_mag.png');

%% Ruido de mediçao e processo

fprintf('Gerando sinal de ruido...\n')

% Pegando y e os valores maximos
sys = ss(A, B1, C, D1);  % B1 pois queremos estudar apenas w(t)
y = lsim(sys, w, t);
y1 = y(:,1);
y2 = y(:,2);

% Procedimento para gerar matriz de variancia
% SNR = 20;  % 20dB --> Sinal eh 100x mais potente que o ruido
SNR = 30;  % 30dB --> Sinal eh 1000x mais potente que o ruido
[v_y1, v_var_y1] = generate_noise(SNR, y1);
[v_y2, v_var_y2] = generate_noise(SNR, y2);

% Gerando a matriz de covariancia
V = cov(v_var_y1, v_var_y2); 
v = [v_y1; v_y2];
 
vt = timeseries(v, t);
save('../data/measurement_noise.mat', 'vt', '-v7.3')

% Salvando as figuras
%%% Ruido 1
fig_v1 = plot_noise(t, v(1,:), [0, 32, 1.1*min(v(1,:)), 1.1*max(v(1,:))], '1', 'm', true, '../figs/noise_v1.png');
fig_v1_dist = plot_noise_dist(v(1,:), 30, '1', 'm', true, '../figs/noise_v1_dist.png');
%%% Ruido 2
fig_v2 = plot_noise(t, v(2,:), [0, 32, 1.1*min(v(2,:)), 1.1*max(v(2,:))], '2', 'm/s', true, '../figs/noise_v2.png');
fig_v2_dist = plot_noise_dist(v(2,:), 30, '2', 'm/s', true, '../figs/noise_v2_dist.png');

% Limpando as variaveis
% clear v v_y1 v_y2 w t wt;  % Nao necessario manter isso em memoria

%% Diagrama de bode e curvas para cada caso de dano

fprintf('Gerando diagrama de bode e comparando curvas...\n')

% '0' e sempre saudavel
sim_case = '0';

A_hlt = eval(sprintf('A_c%s', sim_case));
B1_hlt = eval(sprintf('B1_c%s', sim_case));
% B2_hlt = eval(sprintf('B2_c%s', sim_case));  % Nao necessario (u(t) = 0)
C_hlt = eval(sprintf('C_c%s', sim_case));
D1_hlt = eval(sprintf('D1_c%s', sim_case));  
% D2_hlt = eval(sprintf('D2_c%s', sim_case));  % Nao necessario (u(t) = 0)

sys_hlt = ss(A_hlt, B1_hlt, C_hlt, D1_hlt);

y_hlt = lsim(sys, w, t);
y1_hlt = y_hlt(:,1);
y2_hlt = y_hlt(:,2);

[y_hlt_bode, ~, wout] = bode(sys_hlt, linspace(k1*f0*2*pi, (k2*f0+5)*2*pi, 100));
y1_h1t_bode = mag2db(squeeze(y_hlt_bode(1,1,:)));
y2_h1t_bode = mag2db(squeeze(y_hlt_bode(2,1,:)));

% for i = ['1', '2', '3']  % Cada caso da simulacao
for i = ['1']  % Cada caso da simulacao
    sim_case = i;
    
    A_dmg = eval(sprintf('A_c%s', sim_case));
    B1_dmg = eval(sprintf('B1_c%s', sim_case));
    % B2_dmg = eval(sprintf('B2_c%s', sim_case));  % Nao necessario (u(t) = 0)
    C_dmg = eval(sprintf('C_c%s', sim_case));
    D1_dmg = eval(sprintf('D1_c%s', sim_case));  
    % D2_dmg = eval(sprintf('D2_c%s', sim_case));  % Nao necessario (u(t) = 0)

    sys_dmg = ss(A_dmg, B1_dmg, C_dmg, D1_dmg);
    
    y_dmg = lsim(sys_dmg, w, t);
    y1_dmg = y_dmg(:,1);
    y2_dmg = y_dmg(:,2);
    
    [y_dmg_bode, ~, wout] = bode(sys_dmg, linspace(k1*f0*2*pi, (k2*f0+5)*2*pi, 100));
    y1_dmg_bode = mag2db(squeeze(y_dmg_bode(1,1,:)));
    y2_dmg_bode = mag2db(squeeze(y_dmg_bode(2,1,:)));

    figure
    subplot(2, 1, 1)
    hold on
    plot(t, y1_dmg)
    plot(t, y1_hlt)
    legend(sprintf('Situacao de dano %s', sim_case), 'Saudavel')
    grid on
    xlabel('t (s)')
    ylabel('y_1(t) (m)')

    subplot(2, 1, 2)
    plot(t, (y1_hlt - y1_dmg), 'b')
    grid on
    xlabel('t (s)')
    ylabel('r_1(t) (m)')
    legend('Residuo')

    figure
    subplot(2, 1, 1)
    hold on
    plot(t, y2_dmg)
    plot(t, y2_hlt)
    legend(sprintf('Situacao de dano %s', sim_case), 'Saudavel')
    grid on
    xlabel('t (s)')
    ylabel('y_2(t) (m/s^2)')

    subplot(2, 1, 2)
    plot(t, (y2_hlt - y2_dmg), 'b')
    legend('Residuo')
    grid on
    xlabel('t (s)')
    ylabel('r_2(t) (m/s^2)')


    figure
    hold on
    plot(wout, y1_h1t_bode, 'k')
    plot(wout, y1_dmg_bode, 'r--')
    grid on
    xlabel('\omega (rad/s)')
    ylabel('|Y_1(j\omega)|(dB)')
    legend(sprintf('Situacao de dano %s', sim_case), 'Saudavel')

    figure
    hold on
    grid on
    xlabel('\omega (rad/s)')
    ylabel('|Y_2(j\omega)| (dB)')
    plot(wout, y2_h1t_bode, 'k')
    plot(wout, y2_dmg_bode, 'r--')
    legend(sprintf('Situacao de dano %s', sim_case), 'Saudavel')

end

%% Rodando a simulaçao

fprintf('Rodando as simulaçoes...\n')

% Condiçoes iniciais
% CI = [1; 1; 1; 1];
CI = [0; 0; 0; 0];

for i = ['0', '1', '2', '3']  % Cada caso da simulacao
    sim_case = i;
    A_sim_case = eval(sprintf('A_c%s', sim_case));
    
    [t_luenberger, x_luenberger, y_luenberger, x_hat_obs1_luenberger, x_hat_obs2_luenberger, y_hat_luenberger] = run_sim('luenberger');
    % [t_uio, x_uio, y_uio, x_hat_obs1_uio, x_hat_obs2_uio, y_hat_uio] = run_sim('uio');
    % [t_kalman, x_kalman, y_kalman, x_hat_obs1_kalman, x_hat_obs2_kalman, y_hat_kalman] = run_sim('kalman');

    % Plotagens -- TODO: CONVERTER PARA FUNÇOES DPS!
    %%% Residuos para os diferentes casos
    % figure('visible', 'off')
    % title(sprintf(''))
    %%% 
end
